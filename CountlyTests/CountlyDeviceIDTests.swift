//
//  CountlyDeviceIDTests.swift
//  CountlyTests
//
//  Created by Muhammad Junaid Akram on 06/06/2024.
//  Copyright Â© 2024 Countly. All rights reserved.
//

import Foundation
import XCTest
@testable import Countly

class CountlyDeviceIDTests: CountlyBaseTestCase {
    
    var testDeviceID: String = "test1234"
    // Run this test first if you are facing cache not clear or instances are not reset properly
    // This is a dummy test to cover the edge case clear the cache when SDK is not initialized
    func testDummy() {
    }
    
    
    // "setID" with custom device id
    // - validate that device id is developer supplied
    // - set same id and validate that it is not set
    
    func test_setID_sameCustom() {
        let config = createBaseConfig()
        config.requiresConsent = false;
        config.deviceID = testDeviceID;
        Countly.sharedInstance().start(with: config);
        
        validateDeveloperSuppliedID(deviceID: testDeviceID)
        
        Countly.sharedInstance().setID(testDeviceID)
        
        validateDeveloperSuppliedID(deviceID: testDeviceID)
    }
    
    // "setID" with custom device id
    // - validate that device id is developer supplied
    // - set same id and validate that it is not set
    
    func test_setID_custom() {
        let config = createBaseConfig()
        config.requiresConsent = false;
        config.deviceID = testDeviceID;
        Countly.sharedInstance().start(with: config);
        
        validateDeveloperSuppliedID(deviceID: testDeviceID)
        
        let newId = "New_ID"
        Countly.sharedInstance().setID(newId)
        
        validateDeveloperSuppliedID(deviceID: newId)
    }
    
    // "setID"
    // - Validate that device id is generated by the sdk
    // - Set a new id and validate that it is set
    // - Set null and validate that it is not changed
    // - Set empty and validate that it is not changed
    // - Set the same id and validate that it is not changed
    
    func test_setID() {
        let config = createBaseConfig()
        config.requiresConsent = false;
        Countly.sharedInstance().start(with: config);
        validateSdkGeneratedID() // validate ID exists and is SDK generated
        
        let newId = "New_ID"
        Countly.sharedInstance().setID(newId)
        XCTAssertEqual(2, CountlyPersistency.sharedInstance().remainingRequestCount())
        guard let queuedRequests =  CountlyPersistency.sharedInstance().value(forKey: "queuedRequests") as? [String] else {
            fatalError("Failed to get queuedRequests from CountlyPersistency")
        }
        validateSetIdOnServerRequest(request: queuedRequests[1], newDeviceId: newId)
        validateDeveloperSuppliedID(deviceID: newId)
        
        Countly.sharedInstance().setID("")
        validateDeveloperSuppliedID(deviceID: newId)
        
        Countly.sharedInstance().setID("")
        validateDeveloperSuppliedID(deviceID: newId)
        
        let sdkDeviceID = Countly.sharedInstance().deviceID()
        
        Countly.sharedInstance().setID(sdkDeviceID)
        validateDeveloperSuppliedID(deviceID: newId)
    }
    
    
    func validateDeveloperSuppliedID(deviceID: String) {
        let sdkDeviceID = Countly.sharedInstance().deviceID()
        XCTAssertTrue(Countly.sharedInstance().deviceIDType() == CLYDeviceIDType.custom, "Countly deviced id type should be Custom when device id is provided during init.")
        XCTAssertTrue(sdkDeviceID == deviceID, "Countly device id not match with provided device id.")
    }
    
    func validateSdkGeneratedID() {
        let sdkDeviceID = Countly.sharedInstance().deviceID()
        XCTAssertTrue(Countly.sharedInstance().deviceIDType() == CLYDeviceIDType.IDFV, "Countly deviced id type should be IDFV when no device id is provided during init.")
        XCTAssertTrue(sdkDeviceID == getIDFV(), "Countly device id not match with provided device id.")
    }
    
    func validateSetIdOnServerRequest(request: String, newDeviceId: String) {
        let parsedRequest = parseQueryString(request)
        
        let sdkDeviceID = Countly.sharedInstance().deviceID()
        
        let oldDeviceID = parsedRequest["old_device_id"] as! String;
        let deviceIDInRequest = parsedRequest["device_id"] as! String;
        
        XCTAssertTrue(Countly.sharedInstance().deviceIDType() == CLYDeviceIDType.custom, "Countly deviced id type should be Custom.")
        XCTAssertTrue(oldDeviceID == getIDFV())
        XCTAssertTrue(newDeviceId == deviceIDInRequest)
        XCTAssertTrue(sdkDeviceID == deviceIDInRequest)
    }
    
    func getIDFV() -> String {
#if (os(iOS) || os(tvOS))
        return UIDevice.current.identifierForVendor?.uuidString ?? ""
#else
        var UUID = CountlyPersistency.sharedInstance().retrieveNSUUID()
        if UUID == nil {
            UUID = NSUUID().uuidString
            CountlyPersistency.sharedInstance().storeNSUUID(UUID)
        }
        
        return UUID ?? ""
#endif
    }
    
}



